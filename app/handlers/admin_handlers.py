from datetime import datetime
import json
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, update, delete, and_, func
from sqlalchemy.ext.asyncio import AsyncSession
from app.database.database import get_db
from app.database.models import User, Event, Registration
from app.keyboards.admin_keyboards import (
    get_admin_main_menu_keyboard,
    get_events_list_keyboard,
    get_event_management_keyboard,
    get_event_form_keyboard,
    get_confirm_keyboard,
    get_moderator_management_keyboard,
    get_broadcast_keyboard,
    get_export_keyboard
)
from app.config import ADMIN_IDS

admin_router = Router()

# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class EventForm(StatesGroup):
    title = State()
    short_description = State()
    full_description = State()
    date = State()
    location = State()
    speakers = State()
    image_path = State()
    registration_required = State()
    max_participants = State()
    confirm = State()

# FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastForm(StatesGroup):
    text = State()
    with_registration = State()
    confirm = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async def is_admin_or_moderator(user_id: int) -> bool:
    async for db in get_db():
        user = await db.execute(select(User).where(User.telegram_id == user_id))
        user = user.scalar_one_or_none()
        if user and (user.is_admin or user.is_moderator):
            return True
        if user_id in ADMIN_IDS:
            return True
    return False

# –ö–æ–º–∞–Ω–¥–∞ /admin
@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if not await is_admin_or_moderator(message.from_user.id):
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.answer("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_main_menu_keyboard())

# –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
@admin_router.callback_query(F.data == "admin_events")
async def list_events(callback: CallbackQuery):
    if not await is_admin_or_moderator(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    
    async for db in get_db():
        events = await db.execute(select(Event).order_by(Event.date.desc()))
        events = events.scalars().all()
        
        if not events:
            await callback.message.edit_text(
                "üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!",
                reply_markup=get_events_list_keyboard([])
            )
        else:
            await callback.message.edit_text(
                "üìÖ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π:",
                reply_markup=get_events_list_keyboard(events)
            )
    await callback.answer()

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data == "create_event")
async def start_event_creation(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_or_moderator(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    
    await state.set_state(EventForm.title)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_event_form_keyboard()
    )
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.message(EventForm.title)
async def process_event_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(EventForm.short_description)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_event_form_keyboard(with_skip=True)
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
@admin_router.message(EventForm.short_description)
async def process_short_description(message: Message, state: FSMContext):
    await state.update_data(short_description=message.text)
    await state.set_state(EventForm.full_description)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_event_form_keyboard(with_skip=True)
    )

# –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
@admin_router.callback_query(F.data == "skip_field")
async def skip_optional_field(callback: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–ª–µ–¥—É—é—â–µ–µ
    if current_state == EventForm.short_description.state:
        await state.update_data(short_description=None)
        await state.set_state(EventForm.full_description)
        await callback.message.edit_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=get_event_form_keyboard(with_skip=True)
        )
    elif current_state == EventForm.full_description.state:
        await state.update_data(full_description=None)
        await state.set_state(EventForm.date)
        await callback.message.edit_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
            reply_markup=get_event_form_keyboard()
        )
    elif current_state == EventForm.location.state:
        await state.update_data(location=None)
        await state.set_state(EventForm.speakers)
        await callback.message.edit_text(
            "üë• –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ø–∏–∫–µ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
            reply_markup=get_event_form_keyboard(with_skip=True)
        )
    elif current_state == EventForm.speakers.state:
        await state.update_data(speakers=None)
        await state.set_state(EventForm.image_path)
        await callback.message.edit_text(
            "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=get_event_form_keyboard(with_skip=True)
        )
    elif current_state == EventForm.image_path.state:
        await state.update_data(image_path=None)
        await state.set_state(EventForm.registration_required)
        await callback.message.edit_text(
            "‚ùì –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è? (–¥–∞/–Ω–µ—Ç):",
            reply_markup=get_event_form_keyboard()
        )
    elif current_state == EventForm.max_participants.state:
        await state.update_data(max_participants=None)
        data = await state.get_data()
        confirmation_message = await format_confirmation_message(data)
        await callback.message.edit_text(
            confirmation_message,
            reply_markup=get_confirm_keyboard('create_event')
        )
        await state.set_state(EventForm.confirm)
    
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def format_confirmation_message(data):
    confirmation_message = "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:\n\n"
    confirmation_message += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
    if data.get('short_description'):
        confirmation_message += f"üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data['short_description']}\n"
    if data.get('full_description'):
        confirmation_message += f"üìù –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {data['full_description']}\n"
    confirmation_message += f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
    if data.get('location'):
        confirmation_message += f"üìç –ú–µ—Å—Ç–æ: {data['location']}\n"
    if data.get('speakers'):
        try:
            speakers = json.loads(data['speakers'])
            confirmation_message += f"üë• –°–ø–∏–∫–µ—Ä—ã: {', '.join(speakers)}\n"
        except:
            confirmation_message += f"üë• –°–ø–∏–∫–µ—Ä—ã: {data['speakers']}\n"
    confirmation_message += f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if data.get('registration_required') else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    if data.get('max_participants'):
        confirmation_message += f"üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {data['max_participants']}\n"
    return confirmation_message

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
@admin_router.message(EventForm.full_description)
async def process_full_description(message: Message, state: FSMContext):
    await state.update_data(full_description=message.text)
    await state.set_state(EventForm.date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
        reply_markup=get_event_form_keyboard()
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã
@admin_router.message(EventForm.date)
async def process_date(message: Message, state: FSMContext):
    try:
        event_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(date=event_date)
        await state.set_state(EventForm.location)
        await message.answer(
            "üìç –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:",
            reply_markup=get_event_form_keyboard(with_skip=True)
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
            reply_markup=get_event_form_keyboard()
        )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
@admin_router.message(EventForm.location)
async def process_location(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    await state.set_state(EventForm.speakers)
    await message.answer(
        "üë• –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–ø–∏–∫–µ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        reply_markup=get_event_form_keyboard(with_skip=True)
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤
@admin_router.message(EventForm.speakers)
async def process_speakers(message: Message, state: FSMContext):
    speakers = [s.strip() for s in message.text.split(",")]
    await state.update_data(speakers=json.dumps(speakers))
    await state.set_state(EventForm.image_path)
    await message.answer(
        "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        reply_markup=get_event_form_keyboard(with_skip=True)
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@admin_router.message(EventForm.image_path)
async def process_image(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(image_path=message.photo[-1].file_id)
    await state.set_state(EventForm.registration_required)
    await message.answer(
        "‚ùì –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è? (–¥–∞/–Ω–µ—Ç):",
        reply_markup=get_event_form_keyboard()
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@admin_router.message(EventForm.registration_required)
async def process_registration_required(message: Message, state: FSMContext):
    registration_required = message.text.lower() in ['–¥–∞', 'yes', '1', 'true']
    await state.update_data(registration_required=registration_required)
    
    if registration_required:
        await state.set_state(EventForm.max_participants)
        await message.answer(
            "üë• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):",
            reply_markup=get_event_form_keyboard(with_skip=True)
        )
    else:
        await state.update_data(max_participants=None)
        data = await state.get_data()
        confirmation_message = await format_confirmation_message(data)
        
        await message.answer(
            confirmation_message,
            reply_markup=get_confirm_keyboard('create_event')
        )
        await state.set_state(EventForm.confirm)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@admin_router.message(EventForm.max_participants)
async def process_max_participants(message: Message, state: FSMContext):
    try:
        max_participants = int(message.text)
        await state.update_data(max_participants=max_participants)
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
            reply_markup=get_event_form_keyboard(with_skip=True)
        )
        return
    
    data = await state.get_data()
    confirmation_message = await format_confirmation_message(data)
    
    await message.answer(
        confirmation_message,
        reply_markup=get_confirm_keyboard('create_event')
    )
    await state.set_state(EventForm.confirm)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data == "confirm_create_event")
async def confirm_event_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    async for db in get_db():
        new_event = Event(
            title=data['title'],
            short_description=data.get('short_description'),
            full_description=data.get('full_description'),
            date=data['date'],
            location=data.get('location'),
            speakers=data.get('speakers'),
            image_path=data.get('image_path'),
            registration_required=data['registration_required'],
            max_participants=data.get('max_participants')
        )
        db.add(new_event)
        await db.commit()
    
    await callback.message.edit_text(
        "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
        reply_markup=get_admin_main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data == "cancel_event_form")
async def cancel_event_creation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_admin_main_menu_keyboard()
    )
    await callback.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
@admin_router.callback_query(F.data.startswith("manage_event_"))
async def manage_event(callback: CallbackQuery):
    if not await is_admin_or_moderator(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    
    event_id = int(callback.data.split("_")[-1])
    async for db in get_db():
        event = await db.execute(select(Event).where(Event.id == event_id))
        event = event.scalar_one_or_none()
        
        if not event:
            await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        event_date = event.date.strftime("%d.%m.%Y %H:%M")
        text = f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.title}\n"
        text += f"üìÖ –î–∞—Ç–∞: {event_date}\n"
        if event.location:
            text += f"üìç –ú–µ—Å—Ç–æ: {event.location}\n"
        if event.speakers:
            try:
                speakers = json.loads(event.speakers)
                text += f"üë• –°–ø–∏–∫–µ—Ä—ã: {', '.join(speakers)}\n"
            except:
                text += f"üë• –°–ø–∏–∫–µ—Ä—ã: {event.speakers}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        reg_count = await db.execute(
            select(func.count(Registration.id)).where(Registration.event_id == event_id)
        )
        participants_count = reg_count.scalar()
        text += f"\nüë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
        if event.max_participants:
            text += f" –∏–∑ {event.max_participants}"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_event_management_keyboard(event_id)
        )
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data.startswith("delete_event_"))
async def delete_event_prompt(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    async for db in get_db():
        event = await db.execute(select(Event).where(Event.id == event_id))
        event = event.scalar_one_or_none()
        
        if not event:
            await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        await callback.message.edit_text(
            f"‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{event.title}'?",
            reply_markup=get_confirm_keyboard('delete_event', event_id)
        )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data.startswith("confirm_delete_event_"))
async def confirm_delete_event(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    async for db in get_db():
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await db.execute(delete(Registration).where(Registration.event_id == event_id))
        # –£–¥–∞–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        await db.execute(delete(Event).where(Event.id == event_id))
        await db.commit()
    
    await callback.message.edit_text(
        "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ",
        reply_markup=get_admin_main_menu_keyboard()
    )
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data.startswith("cancel_delete_event_"))
async def cancel_delete_event(callback: CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    await manage_event(callback)

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
@admin_router.callback_query(F.data == "admin_main_menu")
async def return_to_admin_menu(callback: CallbackQuery):
    if not await is_admin_or_moderator(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_main_menu_keyboard()
    )
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data.startswith("view_participants_"))
async def view_participants(callback: CallbackQuery):
    if not await is_admin_or_moderator(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    
    event_id = int(callback.data.split("_")[-1])
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        event = await db.execute(select(Event).where(Event.id == event_id))
        event = event.scalar_one_or_none()
        
        if not event:
            await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        participants = await db.execute(
            select(Registration, User)
            .join(User, Registration.user_id == User.id)
            .where(Registration.event_id == event_id)
            .order_by(Registration.registered_at.desc())
        )
        participants = participants.all()
        
        if not participants:
            text = f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.title}\n\n"
            text += "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        else:
            text = f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.title}\n\n"
            text += f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
            if event.max_participants:
                text += f" –∏–∑ {event.max_participants}"
            text += "\n\nüìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
            
            for i, (registration, user) in enumerate(participants, 1):
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
                participant_info = f"{i}. "
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ first_name –∏ last_name
                full_name = ""
                if user.first_name:
                    full_name += user.first_name
                if user.last_name:
                    full_name += f" {user.last_name}"
                
                if full_name.strip():
                    participant_info += full_name.strip()
                else:
                    participant_info += f"@{user.username}" if user.username else f"ID: {user.telegram_id}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                reg_date = registration.registered_at.strftime("%d.%m.%Y %H:%M")
                participant_info += f" ({reg_date})"
                
                text += participant_info + "\n"
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                if i >= 50:  # Telegram –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    text += f"\n... –∏ –µ—â—ë {len(participants) - i} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                    break
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —ç–∫—Å–ø–æ—Ä—Ç–∞
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", callback_data=f"export_participants_{event_id}")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_event_{event_id}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

# –≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ CSV —Ñ–∞–π–ª
@admin_router.callback_query(F.data.startswith("export_participants_"))
async def export_participants(callback: CallbackQuery):
    if not await is_admin_or_moderator(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    
    event_id = int(callback.data.split("_")[-1])
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        event = await db.execute(select(Event).where(Event.id == event_id))
        event = event.scalar_one_or_none()
        
        if not event:
            await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await db.execute(
            select(Registration, User)
            .join(User, Registration.user_id == User.id)
            .where(Registration.event_id == event_id)
            .order_by(Registration.registered_at.desc())
        )
        participants = participants.all()
        
        if not participants:
            await callback.answer("‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º CSV –∫–æ–Ω—Ç–µ–Ω—Ç
        import io
        import csv
        
        csv_buffer = io.StringIO()
        csv_writer = csv.writer(csv_buffer)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        csv_writer.writerow(['‚Ññ', '–ò–º—è', 'Username', 'Telegram ID', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'])
        
        # –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        for i, (registration, user) in enumerate(participants, 1):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
            full_name = ""
            if user.first_name:
                full_name += user.first_name
            if user.last_name:
                full_name += f" {user.last_name}"
            
            csv_writer.writerow([
                i,
                full_name.strip() if full_name.strip() else '',
                user.username or '',
                user.telegram_id,
                registration.registered_at.strftime("%d.%m.%Y %H:%M")
            ])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        csv_content = csv_buffer.getvalue().encode('utf-8-sig')  # utf-8-sig –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        csv_file = io.BytesIO(csv_content)
        csv_file.name = f"participants_{event.title}_{datetime.now().strftime('%d_%m_%Y')}.csv"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        from aiogram.types import BufferedInputFile
        document = BufferedInputFile(csv_content, filename=csv_file.name)
        
        await callback.message.answer_document(
            document,
            caption=f"üìä –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{event.title}'\n"
                   f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}"
        )
        
        await callback.answer("‚úÖ –§–∞–π–ª —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!")


# FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class EventEditForm(StatesGroup):
    event_id = State()
    field = State()
    value = State()
    confirm = State()

# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_router.callback_query(F.data.startswith("edit_event_"))
async def start_edit_event(callback: CallbackQuery, state: FSMContext):
    if not await is_admin_or_moderator(callback.from_user.id):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    
    event_id = int(callback.data.split("_")[-1])
    async for db in get_db():
        event = await db.execute(select(Event).where(Event.id == event_id))
        event = event.scalar_one_or_none()
        
        if not event:
            await callback.answer("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(event_id=event_id)
        await state.set_state(EventEditForm.field)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        event_date = event.date.strftime("%d.%m.%Y %H:%M")
        text = f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{event.title}'\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        text += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
        text += f"üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {event.short_description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üìù –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {event.full_description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üìÖ –î–∞—Ç–∞: {event_date}\n"
        text += f"üìç –ú–µ—Å—Ç–æ: {event.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        
        if event.speakers:
            try:
                speakers = json.loads(event.speakers)
                text += f"üë• –°–ø–∏–∫–µ—Ä—ã: {', '.join(speakers)}\n"
            except:
                text += f"üë• –°–ø–∏–∫–µ—Ä—ã: {event.speakers}\n"
        else:
            text += "üë• –°–ø–∏–∫–µ—Ä—ã: –ù–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        text += f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if event.registration_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
        text += f"üë• –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {event.max_participants or '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_title")],
            [InlineKeyboardButton(text="üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_short_description")],
            [InlineKeyboardButton(text="üìù –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_full_description")],
            [InlineKeyboardButton(text="üìÖ –î–∞—Ç–∞", callback_data="edit_field_date")],
            [InlineKeyboardButton(text="üìç –ú–µ—Å—Ç–æ", callback_data="edit_field_location")],
            [InlineKeyboardButton(text="üë• –°–ø–∏–∫–µ—Ä—ã", callback_data="edit_field_speakers")],
            [InlineKeyboardButton(text="üñº –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_field_image")],
            [InlineKeyboardButton(text="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="edit_field_registration")],
            [InlineKeyboardButton(text="üë• –ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="edit_field_max_participants")],
            [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"manage_event_{event_id}")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_router.callback_query(F.data.startswith("edit_field_"))
async def select_edit_field(callback: CallbackQuery, state: FSMContext):
    field = callback.data.split("edit_field_")[1]
    await state.update_data(field=field)
    await state.set_state(EventEditForm.value)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    field_messages = {
        'title': "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        'short_description': "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        'full_description': "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        'date': "üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
        'location': "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:",
        'speakers': "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–ø–∏–∫–µ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        'image': "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
        'registration': "‚úÖ –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è? (–¥–∞/–Ω–µ—Ç):",
        'max_participants': "üë• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∏–ª–∏ 0 –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π):"
    }
    
    message_text = field_messages.get(field, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    
    # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ"
    clearable_fields = ['short_description', 'full_description', 'location', 'speakers', 'image', 'max_participants']
    
    if field in clearable_fields:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ", callback_data="clear_field")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
        await callback.message.edit_text(message_text, reply_markup=keyboard)
    else:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ])
        await callback.message.edit_text(message_text, reply_markup=keyboard)
    
    await callback.answer()

# –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
@admin_router.callback_query(F.data == "clear_field")
async def clear_field(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']
    field = data['field']
    
    await state.update_data(value=None)
    await state.set_state(EventEditForm.confirm)
    
    await callback.message.edit_text(
        f"‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ '{field}'?",
        reply_markup=get_confirm_keyboard('edit_event', event_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
@admin_router.message(EventEditForm.value)
async def process_edit_value(message: Message, state: FSMContext):
    data = await state.get_data()
    field = data['field']
    value = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    if field == 'date':
        try:
            event_date = datetime.strptime(value, "%d.%m.%Y %H:%M")
            value = event_date
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
                reply_markup=get_event_form_keyboard()
            )
            return
    elif field == 'registration':
        value = value.lower() in ['–¥–∞', 'yes', '1', 'true']
    elif field == 'max_participants':
        try:
            value = int(value) if int(value) > 0 else None
        except ValueError:
            await message.answer(
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ 0 –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
                reply_markup=get_event_form_keyboard()
            )
            return
    elif field == 'speakers':
        speakers = [s.strip() for s in value.split(",")]
        value = json.dumps(speakers)
    
    await state.update_data(value=value)
    await state.set_state(EventEditForm.confirm)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    field_names = {
        'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
        'short_description': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        'full_description': '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        'date': '–î–∞—Ç–∞',
        'location': '–ú–µ—Å—Ç–æ',
        'speakers': '–°–ø–∏–∫–µ—Ä—ã',
        'registration': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
        'max_participants': '–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
    }
    
    field_name = field_names.get(field, field)
    
    if field == 'date':
        display_value = value.strftime("%d.%m.%Y %H:%M")
    elif field == 'registration':
        display_value = '–¢—Ä–µ–±—É–µ—Ç—Å—è' if value else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
    elif field == 'speakers':
        try:
            speakers = json.loads(value)
            display_value = ', '.join(speakers)
        except:
            display_value = str(value)
    elif field == 'max_participants':
        display_value = str(value) if value else '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'
    else:
        display_value = str(value)
    
    await message.answer(
        f"‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:\n\n"
        f"–ü–æ–ª–µ: {field_name}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {display_value}",
        reply_markup=get_confirm_keyboard('edit_event', data['event_id'])
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
@admin_router.message(EventEditForm.value, F.photo)
async def process_edit_image(message: Message, state: FSMContext):
    data = await state.get_data()
    if data['field'] == 'image':
        value = message.photo[-1].file_id
        await state.update_data(value=value)
        await state.set_state(EventEditForm.confirm)
        
        await message.answer(
            "‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
            reply_markup=get_confirm_keyboard('edit_event', data['event_id'])
        )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_router.callback_query(F.data.startswith("confirm_edit_event_"))
async def confirm_edit_event(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    event_id = data['event_id']
    field = data['field']
    value = data['value']
    
    async for db in get_db():
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        field_mapping = {
            'title': Event.title,
            'short_description': Event.short_description,
            'full_description': Event.full_description,
            'date': Event.date,
            'location': Event.location,
            'speakers': Event.speakers,
            'image': Event.image_path,
            'registration': Event.registration_required,
            'max_participants': Event.max_participants
        }
        
        if field in field_mapping:
            await db.execute(
                update(Event)
                .where(Event.id == event_id)
                .values({field_mapping[field]: value})
            )
            await db.commit()
    
    await callback.message.edit_text(
        "‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!",
        reply_markup=get_admin_main_menu_keyboard()
    )
    await state.clear()
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_router.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    event_id = data.get('event_id')
    await state.clear()
    
    if event_id:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º
        callback.data = f"manage_event_{event_id}"
        await manage_event(callback)
    else:
        await callback.message.edit_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_admin_main_menu_keyboard()
        )
    await callback.answer()

# TODO: –î–æ–±–∞–≤–∏—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è is_admin)
# TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
# TODO: –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
# TODO: –î–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª