from datetime import datetime
from typing import Optional
import json

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.utils.markdown import hbold, hitalic, hcode
from sqlalchemy import select, and_, func
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from app.database.database import get_db
from app.database.models import User, Event, Registration
from app.keyboards.user_keyboards import (
    get_main_menu_keyboard,
    get_events_pagination_keyboard,
    get_event_detail_keyboard,
    get_back_to_menu_keyboard,
    get_registration_keyboard
)
from app.config import EVENTS_PER_PAGE

user_router = Router()

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None, parse_mode="HTML"):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–∏ —Å –º–µ–¥–∏–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±—ã–ª–æ –º–µ–¥–∏–∞), —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
            await callback.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        except:
            # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.answer(
                text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )

@user_router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = (
        f"üéâ –ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º, {hbold(message.from_user.first_name)}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç {hbold('–°–æ–≤–µ—Ç–∞ —Ç–∞—Ç–∞—Ä—Å–∫–æ–π –º–æ–ª–æ–¥—ë–∂–∏')}!\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"üìÖ –£–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–∏—Ö —Ö–∞–ª—è–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö\n"
        f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
        f"üë• –ë—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Ç–∞—Ç–∞—Ä—Å–∫–æ–π –æ–±—â–∏–Ω—ã –ú–æ—Å–∫–≤—ã\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )

@user_router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = (
        f"üè† {hbold('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await safe_edit_message(callback, welcome_text, get_main_menu_keyboard())
    await callback.answer()

@user_router.callback_query(F.data == "upcoming_events")
async def show_upcoming_events(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    await show_events_page(callback, page=1)

@user_router.callback_query(F.data == "back_to_events")
async def back_to_events(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    await show_events_page(callback, page=1)

@user_router.callback_query(F.data.startswith("events_page_"))
async def handle_events_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    page = int(callback.data.split("_")[-1])
    await show_events_page(callback, page)

async def show_events_page(callback: CallbackQuery, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"""
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        total_query = select(func.count(Event.id)).where(Event.date >= datetime.now())
        total_result = await db.execute(total_query)
        total_events = total_result.scalar()
        
        if total_events == 0:
            await safe_edit_message(
                callback,
                "üìÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.\n"
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
                get_back_to_menu_keyboard()
            )
            await callback.answer()
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º offset –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        offset = (page - 1) * EVENTS_PER_PAGE
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        events_query = (
            select(Event)
            .where(Event.date >= datetime.now())
            .order_by(Event.date)
            .offset(offset)
            .limit(EVENTS_PER_PAGE)
        )
        events_result = await db.execute(events_query)
        events = events_result.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        text = f"üìÖ {hbold('–ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')}\n\n"
        
        for i, event in enumerate(events, 1):
            event_date = event.date.strftime("%d.%m.%Y")
            event_time = event.date.strftime("%H:%M")
            
            speakers_text = ""
            if event.speakers:
                try:
                    speakers = json.loads(event.speakers)
                    if speakers:
                        speakers_text = f"\nüë®‚Äçüè´ {', '.join(speakers)}"
                except:
                    if event.speakers.strip():
                        speakers_text = f"\nüë®‚Äçüè´ {event.speakers}"
            
            text += (
                f"{hbold(f'{offset + i}. {event.title}')}\n"
                f"üìÖ {event_date} –≤ {event_time}\n"
                f"üìç {event.location or '–ú–µ—Å—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'}"
                f"{speakers_text}\n\n"
                f"‚û°Ô∏è /event_{event.id} - –ø–æ–¥—Ä–æ–±–Ω–µ–µ\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        keyboard = get_events_pagination_keyboard(
            current_page=page,
            total_pages=(total_events + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE,
            events=events
        )
        
        await safe_edit_message(callback, text, keyboard)
        await callback.answer()

@user_router.callback_query(F.data.startswith("event_"))
async def show_event_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏"""
    event_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
        event_query = select(Event).where(Event.id == event_id)
        event_result = await db.execute(event_query)
        event = event_result.scalar_one_or_none()
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await db.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        is_registered = False
        if user:
            registration_query = select(Registration).where(
                and_(Registration.user_id == user.id, Registration.event_id == event_id)
            )
            registration_result = await db.execute(registration_query)
            is_registered = registration_result.scalar_one_or_none() is not None
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants_query = select(func.count(Registration.id)).where(Registration.event_id == event_id)
        participants_result = await db.execute(participants_query)
        participants_count = participants_result.scalar()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        event_date = event.date.strftime("%d.%m.%Y")
        event_time = event.date.strftime("%H:%M")
        
        text = f"üìÖ {hbold(event.title)}\n\n"
        
        if event.short_description:
            text += f"{hitalic(event.short_description)}\n\n"
        
        text += f"üìÖ {hbold('–î–∞—Ç–∞:')} {event_date}\n"
        text += f"‚è∞ {hbold('–í—Ä–µ–º—è:')} {event_time}\n"
        text += f"üìç {hbold('–ú–µ—Å—Ç–æ:')} {event.location or '–£—Ç–æ—á–Ω—è–µ—Ç—Å—è'}\n"
        
        if event.speakers:
            try:
                speakers = json.loads(event.speakers)
                if speakers:
                    text += f"üë®‚Äçüè´ {hbold('–°–ø–∏–∫–µ—Ä—ã:')} {', '.join(speakers)}\n"
            except:
                if event.speakers.strip():
                    text += f"üë®‚Äçüè´ {hbold('–°–ø–∏–∫–µ—Ä—ã:')} {event.speakers}\n"
        
        text += f"üë• {hbold('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:')} {participants_count}"
        
        if event.max_participants:
            text += f" –∏–∑ {event.max_participants}"
        
        text += "\n\n"
        
        if event.full_description:
            text += f"{hbold('–û–ø–∏—Å–∞–Ω–∏–µ:')}\n{event.full_description}\n\n"
        
        if is_registered:
            text += "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
        elif event.registration_required:
            if event.max_participants and participants_count >= event.max_participants:
                text += "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)"
            else:
                text += "üìù –î–ª—è —É—á–∞—Å—Ç–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_event_detail_keyboard(
            event_id=event_id,
            is_registered=is_registered,
            registration_required=event.registration_required,
            registration_available=(
                event.registration_required and 
                not is_registered and 
                (not event.max_participants or participants_count < event.max_participants)
            )
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
        if event.image_path:
            try:
                await callback.message.edit_media(
                    media=InputMediaPhoto(
                        media=event.image_path,
                        caption=text,
                        parse_mode="HTML"
                    ),
                    reply_markup=keyboard
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥
                await safe_edit_message(callback, text, keyboard)
        else:
            await safe_edit_message(callback, text, keyboard)
        
        await callback.answer()

@user_router.callback_query(F.data.startswith("register_"))
async def register_for_event(callback: CallbackQuery):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"""
    event_id = int(callback.data.split("_")[1])
    telegram_user = callback.from_user
    
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == telegram_user.id)
        user_result = await db.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            user = User(
                telegram_id=telegram_user.id,
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name
            )
            db.add(user)
            await db.flush()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ
        existing_registration = await db.execute(
            select(Registration).where(
                and_(Registration.user_id == user.id, Registration.event_id == event_id)
            )
        )
        if existing_registration.scalar_one_or_none():
            await callback.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        event_query = select(Event).where(Event.id == event_id)
        event_result = await db.execute(event_query)
        event = event_result.scalar_one_or_none()
        
        if not event:
            await callback.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        if event.max_participants:
            participants_count_query = select(func.count(Registration.id)).where(Registration.event_id == event_id)
            participants_count_result = await db.execute(participants_count_query)
            participants_count = participants_count_result.scalar()
            
            if participants_count >= event.max_participants:
                await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)
                return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        registration = Registration(
            user_id=user.id,
            event_id=event_id
        )
        db.add(registration)
        await db.commit()
        
        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        await show_event_detail(callback)

@user_router.callback_query(F.data == "my_profile")
async def show_user_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    async for db in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == user_id)
        user_result = await db.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            user = User(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name
            )
            db.add(user)
            await db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        registrations_query = (
            select(Registration)
            .options(selectinload(Registration.event))
            .where(Registration.user_id == user.id)
            .join(Event)
            .where(Event.date >= datetime.now())
            .order_by(Event.date)
        )
        registrations_result = await db.execute(registrations_query)
        registrations = registrations_result.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        text = f"üë§ {hbold('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')}\n\n"
        text += f"üëã {hbold('–ò–º—è:')} {user.first_name}"
        if user.last_name:
            text += f" {user.last_name}"
        text += "\n"
        
        if user.username:
            text += f"üìù {hbold('Username:')} @{user.username}\n"
        
        if user.phone:
            text += f"üì± {hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {user.phone}\n"
        
        text += f"üìÖ {hbold('–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:')} {user.created_at.strftime('%d.%m.%Y')}\n\n"
        
        if registrations:
            text += f"üìù {hbold('–ú–æ–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:')}\n\n"
            for reg in registrations:
                event_date = reg.event.date.strftime("%d.%m.%Y")
                event_time = reg.event.date.strftime("%H:%M")
                text += f"‚Ä¢ {hbold(reg.event.title)}\n"
                text += f"  üìÖ {event_date} –≤ {event_time}\n"
                text += f"  üìç {reg.event.location or '–ú–µ—Å—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è'}\n\n"
        else:
            text += "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
        
        await safe_edit_message(callback, text, get_back_to_menu_keyboard())
        await callback.answer()

@user_router.message(F.text.startswith('/event_'))
async def event_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /event_X"""
    try:
        event_id = int(message.text.split('_')[1])
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
        callback_data = f"event_{event_id}"
        
        class MockCallbackQuery:
            def __init__(self, message, user, data):
                self.message = message
                self.from_user = user
                self.data = data
            
            async def answer(self, text=None, show_alert=False):
                pass
        
        mock_callback = MockCallbackQuery(message, message.from_user, callback_data)
        await show_event_detail(mock_callback)
        
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /event_ID, –≥–¥–µ ID - –Ω–æ–º–µ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.",
            reply_markup=get_main_menu_keyboard()
        )